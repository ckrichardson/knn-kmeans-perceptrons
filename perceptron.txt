This perceptron implementation tried to keep the code simple while still being perfectly functional.   

Perceptron_train was designed keeping a few things in mind:   the algorithm is consistent and simple, the weights and bias are the ones that change depending on the data, and any training should stop after the perceptron does not update anymore.   This is refelected in the design of the algorithm.   To start, weights and bias are initialized to zero, as well as a condition, "updated", which checks for whether the weights were updtaed, is initialized to True.   In the while-loop following, which exists to continue updating the preceptron appropriately, we first set "updated" to False, and then train the perceptron for one epoch.   Two helper functions are used to do this:   calculate_activation and calculate_update.   They both accomplish exactly what their name implies - calculate_activation will return the activation value, and then calculate_update will return a boolean based on the real label of the sample and the activation on whether or not the weights should be updated.   If this is true, then we update the weights and bias accordingly, then set "updated" to true again so that the while loop will continue to execute.   If there was no update necessary between the last epoch and the current epoch, then the while loop will cease to continue executing, after which perceptron_train will return a tuple with the final weights and bias.

Perceptron test also followed the philosophy of simplicity.   The flow of the function is intuitive and simple.   First, it will accept the test data, as well as the weights and bias.   Then, for each data sample, it will make a prediction based on its weights and bias.   If the prediction was correct, then we increment the number of predictions that were correct.   If not, then we simply move on to the next sample.   At the end, we divide total number of correct predictions over the total number of samples which will yield a percentage.   This value is then returned from the function.

